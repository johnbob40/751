package main;

import java.util.Collection;

import pu.pi.ParIterator;
import pu.pi.ParIteratorFactory;

public class Average {

	public static void average(){
		Collection<Double> elements = Data.generate(30000000);
		ParIterator<Double> pi = ParIteratorFactory.createParIterator(elements, 8);
		double sum = 0;
		System.out.println("start");
		long startTime = System.nanoTime();

			for(Double d : elements){
				sum += d;
				//System.out.println(Thread.currentThread().getId());
			}

		long endTime = System.nanoTime();

		long duration = (endTime - startTime)/1000000;
		System.out.println(duration);

		System.out.println(sum);
		sum = 0;
		startTime = System.nanoTime();
		//#omp parallel for schedule(static, 8) shared(elements, pi) reduction(+: sum)
		for(int i = 0; i < elements.size(); i++){
			sum += pi.next();
			//Thread.currentThread().getId();
		}
		endTime = System.nanoTime();
		duration = (endTime - startTime)/1000000;
		System.out.println(duration);
		System.out.println(sum);

	}
}
